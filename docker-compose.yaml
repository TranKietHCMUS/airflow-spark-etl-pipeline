version: '3'
x-spark-common: &spark-common
  image: bitnami/spark:latest
  volumes:
    - ./dags/tasks:/opt/bitnami/spark/jobs
    - ./databases/postgres/jdbc:/libs/postgres
  environment:
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    RAW_ZONE_BUCKET_NAME: ${RAW_ZONE_BUCKET_NAME}
    GOLDEN_ZONE_BUCKET_NAME: ${GOLDEN_ZONE_BUCKET_NAME}
  networks:
    - airflow-network

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  image: ${AIRFLOW_IMAGE_NAME:-airflow-spark}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    RAW_ZONE_BUCKET_NAME: ${RAW_ZONE_BUCKET_NAME}
    GOLDEN_ZONE_BUCKET_NAME: ${GOLDEN_ZONE_BUCKET_NAME}
    BOT_TOKEN: ${BOT_TOKEN}
    CHAT_ID: ${CHAT_ID}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./databases/postgres/jdbc:/opt/airflow/postgres
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - airflow-network

services:
  mysql:
    image: mysql:8.0.32
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      TZ: Asia/Ho_Chi_Minh
    ports:
      - "3307:3306"
    volumes:
      - ./databases/mysql/initdb:/docker-entrypoint-initdb.d
    networks:
      - airflow-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 20s
      timeout: 10s
      retries: 5
  
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./databases/postgres/initdb:/docker-entrypoint-initdb.d
      - ./databases/postgres/jdbc:/libs/postgres
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 20s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - airflow-network

  generators:
    image: generators
    build:
      context: ./generators
      dockerfile: Dockerfile
    container_name: generators
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: airflow
      MYSQL_DATABASE: store
      TIME_SLEEP: 300
      INCREASE_CUSTOMERS: 5
      INCREASE_PRODUCTS: 1
      NUM_CUSTOMERS: 100
      NUM_PRODUCTS: 30
      NUM_ORDERS: 100
    ports:
      - 5000:5000
    networks:
      - airflow-network

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    restart: always

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  
  spark-master:
    <<: *spark-common
    container_name: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"
      - "7077:7077"

  spark-worker:
    <<: *spark-common
    container_name: spark-worker
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
      SPARK_MASTER_URL: spark://spark-master:7077

volumes:
  postgres-db-volume:

networks:
  airflow-network: